2do:

Define a new MethComp function that will do anythiqng we like on any dataset
with the classical structure:

A new MethComp function that will do anything we like on any dataset
with the classical structure (which I contemplate to define as a Meth
object, where meth and item are factors) would look like:

MethComp( data, # Dataset in Meth form i.e with columns:
                # meth, item, (repl), y
          # Model specification:           with aliases for service/convenience
          alpha = TRUE,                      bias = alpha,
           beta = FALSE,                    slope = beta,  
            MxI = TRUE,                    matrix = MxI,
            IxR = "repl" %in% names(data), linked = IxR,
          # Transformation to be used for data
          trans = I, 
          # Estimation algorithm
           meth = c("REML","MCMC"),
            ... # parameters passed on to MCmcmc or AltReg )

The from this function is a MethComp object, which is a list with components:

  Model: Description of the model used.
  Trans: List of the transformation and the inverse used prior to modelling.
Convert: M x 5 matrix med en række per metode og søjler alpha, beta,
         MxI, IxR, Res 
   Data: Orginal dataset.
 AltReg: Output from AltReg if this was used: 
         A list with components: 
   mcmc: Output from MCmcmc if this was used: 
         A mcmc.list object, i.e. a list with n.chains elements, each
         of which is a mcmc object. 

The following methods will be defined for a MethComp object:

summary - computes all pairwise conversions with prediction SDs
print   - prints the summary in an intelligent way 
plot    - makes plots of the conversions between methods.
          optionally also a Bland-Altman plot

- and specifically for MethComp objects that comes from the mcmc estimation:

check - calls either trace or post for assessing mcmc convergence
trace - traces of the parameters to check the mcmc convergence. 
post  - posterior densities of parameters.
pairs - two-dimensional posteriors.

o BA.est, AltReg og MethComp must have a trans= argument for
  transformation of data. This should be returned in the object for
  use with the appropriate plotting functions.

------------------------------------------------------------------------------------
In version 0.5.2

o The way the two methods are ordered in BA.plot is reversed. Like in BA.est and
  VC.est, the FIRST method is now the reference; LoA are thus for M2-M1.

o summary.Meth() gives the median and range of measurements for each method too.

o The result from AltReg now have names for the dimnames to improve readability.

o A sample function for sampling the items from Meth object is added.

In version 0.5.1

o A Meth class has been defined, making sure that meth, item and repl
  all are factors. It has summary, print, plot, subset and summary methods. 
  The summary method was formerly called tab.repl.

o A function has.repl() testing wheter a data frame has replicates or not.

o A DA.reg function added which estimates a linear relation between methods
  from the regression of the differences on the averages. 

o plot.MethComp is now a proper S3 method for MethComp objects.
  The former functions plot.MethComp and plot.VarComp have been renamed
  plotMethComp and plotVarComp and are called by plot.MethComp via the
  what= argument.

o A function check.MethComp added, which gives convergence diagnostics
  for a MethComp object, and optionally calls the trace.MethComp and
  post.MethComp functions.

o summary methods for output from BA.est, AltReg og MethComp,
  which produces roughly same-style layout. 

--------------------------------------------------------------------------------

Changes in 0.4.2

o Three new datasets from published papers added: VitCap, PEFR and
  Enzyme. 


Changes in 0.4.1

o Argument random= in MethComp has been replaced by the arguments
  linked=, IxR, MxI.

o Aregument varMxI= added to MethComp allowing to constrain matrix 
  effects to have identical variances across methods.

Changes in 0.4.0

o AltReg for fitting the general model iteratively is added.
  The estimation workhorse is now separated from BA.est to a special
  utility function VC.est, taht estimates in constant bias models.  

o VC.est has been taken out from BA.est to form a separate workhorse
  also usable in the estimation iteration in AltReg. By default (also
  in BA.est) the variance of the matrix effect is now constant across
  methods.

Changes in 0.3.0
 
o New functions trace.MethComp and post.MethComp, giving the trace and 
  posterior densities for the parameters separately for the four chains.

o It is now possible to use BRugs(OpenBugs) for the simulations, by
  specifying program="OpenBugs", "OB" or "Brugs" (case insensitive) 
  in the call to MethComp. If nothing is specified MethComp will check 
  if BRugs is installed and if so use it, otherwise attempt to use WinBUGS. 

Changes in 0.2.2
 
o The BA.est function has been changed so that the LoA are based on
  p/m 2.00 instead of p/m 1.96.

Changes in 0.2.0

o The MethComp function revised and made somewhat modular. Default is
  now 4 chains, using different starting values for the variance components.

o The BA.est function is now used to generate sensible (and diverse) starting
  values for the variance components.

o A MethComp object is now of class mcmc.list, in order to allow use
  of the diagnostic tools from the coda package. Thus the posterior is now in
  a mcmc.list object (a list of matrices), transformed from the raw output
  mcmc.list object.
  
o R2WinBUGS and coda are not required any more, only suggested. Hence the
  BlandAltman plots etc. can be used without trouble loading the package even
  when R2WinBUGS and coda are not installed.

Changes in 0.1.19

o Typos in the documentation fixed (to some extent).

o plot.VarComp now takes range(grid) as the extent of the x-axes.

o Error in column naming in to.wide fixed.

Changes in 0.1.16

o BA.est has been expanded to handle different matrix effects (item by
  method) between methods if the number of methods exceeds 2. Thanks to
  advice from Peter Dalgaard.

o plot.meth now displays plots correctly. An argument to display the variable 
  names inside the panels have been added.

o BlandAltman (and hence BA.plot) has been enhanced to accept axis 
  specifications from limx, limy, eqax and ymax.

o BA.plot now does not give par() suggestions any more.

Changes in 0.1.13

o The default for the y-limit in the BlandAltman function now defaults to
  that the y-axis should have the same extent as the x-axis, symmetrically
  around 0, unless the differences or the limits of agreement are larger.